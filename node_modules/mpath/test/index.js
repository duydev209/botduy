'use strict';

/**
 * Test dependencies.
 */

const mpath = require('../');
const assert = require('assert');

/**
 * logging helper
 */

function log(o) {
  console.log();
  console.log(require('util').inspect(o, false, 1000));
}

/**
 * special path for override tests
 */

const special = '_doc';

/**
 * Tests
 */

describe('mpath', function() {

  /**
   * test doc creator
   */

  function doc() {
    const o = { first: { second: { third: [3, { name: 'aaron' }, 9] } } };
    o.comments = [
      { name: 'one' },
      { name: 'two', _doc: { name: '2' } },
      { name: 'three',
        comments: [{}, { comments: [{ val: 'twoo' }] }],
        _doc: { name: '3', comments: [{}, { _doc: { comments: [{ val: 2 }] } }] } }
    ];
    o.name = 'jiro';
    o.array = [
      { o: { array: [{ x: { b: [4, 6, 8] } }, { y: 10 }] } },
      { o: { array: [{ x: { b: [1, 2, 3] } }, { x: { z: 10 } }, { x: { b: 'hi' } }] } },
      { o: { array: [{ x: { b: null } }, { x: { b: [null, 1] } }] } },
      { o: { array: [{ x: null }] } },
      { o: { array: [{ y: 3 }] } },
      { o: { array: [3, 0, null] } },
      { o: { name: 'ha' } }
    ];
    o.arr = [
      { arr: [{ a: { b: 47 } }, { a: { c: 48 } }, { d: 'yep' }] },
      { yep: true }
    ];
    return o;
  }

  describe('get', function() {
    const o = doc();

    it('`path` must be a string or array', function(done) {
      assert.throws(function() {
        mpath.get({}, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(4, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(function() {}, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(/asdf/, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(Math, o);
      }, /Must be either string or array/);
      assert.throws(function() {
        mpath.get(Buffer, o);
      }, /Must be either string or array/);
      assert.doesNotThrow(function() {
        mpath.get('string', o);
      });
      assert.doesNotThrow(function() {
        mpath.get([], o);
      });
      done();
    });

    describe('without `special`', function() {
      it('works', function(done) {
        assert.equal('jiro', mpath.get('name', o));

        assert.deepEqual(
          { second: { third: [3, { name: 'aaron' }, 9] } }
          , mpath.get('first', o)
        );

        assert.deepEqual(
          { third: [3, { name: 'aaron' }, 9] }
          , mpath.get('first.second', o)
        );

        assert.deepEqual(
          [3, { name: 'aaron' }, 9]
          , mpath.get('first.second.third', o)
        );

        assert.deepEqual(
          3
          , mpath.get('first.second.third.0', o)
        );

        assert.deepEqual(
          9
          , mpath.get('first.second.third.2', o)
        );

        assert.deepEqual(
          { name: 'aaron' }
          , mpath.get('first.second.third.1', o)
        );

        assert.deepEqual(
          'aaron'
 